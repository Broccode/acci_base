name: Docker Security Pipeline

on:
  workflow_dispatch:
  push:
    branches: [ master ]
    paths:
      - 'Dockerfile'
      - '.github/workflows/docker-security.yml'
      - 'src/**'
      - 'Cargo.*'
  pull_request:
    branches: [ master ]
  schedule:
    - cron: '0 2 * * 1' # Weekly scan on Mondays at 2 AM

env:
  DOCKER_BUILDKIT: "1"

jobs:
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
      id-token: write      # Needed for keyless signing

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Cosign
        uses: sigstore/cosign-installer@v3.1.1

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: acci:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          sbom: false

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: acci:latest
          format: cyclonedx-json
          output-file: ./container-bom.json

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        if: success()  # Only run if build succeeds
        with:
          image-ref: 'acci:latest'
          format: 'sarif'
          output: './trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          timeout: '10m'
          ignore-unfixed: false
          scan-type: 'vuln,config,secret'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: success() && hashFiles('./trivy-results.sarif') != ''
        with:
          sarif_file: './trivy-results.sarif'
          category: trivy

      - name: Verify SBOM
        run: |
          # Extract SBOM from image
          docker create --name temp acci:latest
          docker cp temp:/app/bom.json ./container-bom.json
          docker rm temp

          # Install cdxgen for SBOM validation
          npm install -g @cyclonedx/cdxgen

          # Validate SBOM format and check for completeness
          cdxgen --validate ./container-bom.json
          
          # Additional SBOM checks
          if ! jq -e '.components | length > 0' container-bom.json; then
            echo "SBOM appears to be empty or invalid"
            exit 1
          fi

      - name: Run Docker Scout
        uses: docker/scout-action@v1
        with:
          command: quickview,cves,recommendations
          image: acci:latest
          only-severities: critical,high
          exit-code: true

      - name: Check for outdated base images
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'acci:latest'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          format: 'table'

      - name: Create Container Structure Test config
        run: |
          if [ ! -f ./docker/.container-structure-test.yaml ]; then
            cp ./docker/.container-structure-test.yaml.dist ./docker/.container-structure-test.yaml
          fi

      - name: Run Container Structure Test
        uses: plexsystems/container-structure-test-action@v0.3.0
        with:
          image: acci:latest
          config: ./docker/.container-structure-test.yaml

  dependency-audit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Run cargo-audit
        uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run cargo-deny
        uses: EmbarkStudios/cargo-deny-action@v1
        with:
          arguments: --all-features
          command: check licenses sources advisories

  sign-image:
    needs: [security-scan, dependency-audit]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Sign the image with Cosign
        run: |
          cosign sign --yes acci:latest
