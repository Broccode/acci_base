name: Docker Security Pipeline

on:
  workflow_dispatch:
  push:
    branches: [ master ]
    paths:
      - 'docker/Dockerfile.prod'
      - '.github/workflows/docker-security.yml'
      - 'docker/.container-structure-test.yaml'
      - 'docker/**'
      - 'Cargo.lock'
  pull_request:
    branches: [ master ]
  schedule:
    - cron: '0 2 * * 1' # Weekly scan on Mondays at 2 AM

env:
  DOCKER_BUILDKIT: "1"
  PLATFORMS: linux/amd64,linux/ppc64le
  REGISTRY: ghcr.io
  IMAGE_NAME: broccode/acci_base

permissions: write-all

jobs:
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
      issues: write
      checks: write
      pull-requests: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Cosign
        uses: sigstore/cosign-installer@v3.1.1

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build multi-arch image
      - name: Build and push multi-arch image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.prod
          platforms: ${{ env.PLATFORMS }}
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDPLATFORM=linux/amd64

      - name: Extract SBOMs from images
        run: |
          mkdir -p sboms
          
          # Extract AMD64 SBOM
          if docker pull --platform linux/amd64 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest; then
            docker create --platform linux/amd64 --name temp-amd64 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            docker cp temp-amd64:/app/bom.json ./sboms/bom-amd64.json || echo "No SBOM found in AMD64 image"
            docker rm temp-amd64
          else
            echo "Failed to pull AMD64 image"
            exit 1
          fi
          
          # Extract PPC64LE SBOM
          if docker pull --platform linux/ppc64le ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest; then
            docker create --platform linux/ppc64le --name temp-ppc64le ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            docker cp temp-ppc64le:/app/bom.json ./sboms/bom-ppc64le.json || echo "No SBOM found in PPC64LE image"
            docker rm temp-ppc64le
          else
            echo "Failed to pull PPC64LE image"
            exit 1
          fi

      - name: Upload SBOMs
        uses: actions/upload-artifact@v4
        with:
          name: sboms
          path: sboms/

      - name: Run Trivy vulnerability scanner for AMD64
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: sarif
          output: trivy-results-amd64.sarif
          severity: CRITICAL,HIGH,MEDIUM

      - name: Run Trivy vulnerability scanner for PPC64LE
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: sarif
          output: trivy-results-ppc64le.sarif
          severity: CRITICAL,HIGH,MEDIUM

      - name: Run Trivy config scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: config
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: sarif
          output: trivy-config-results.sarif
          severity: CRITICAL,HIGH,MEDIUM

      - name: Run Trivy filesystem scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: .
          format: sarif
          output: trivy-fs-results.sarif
          severity: CRITICAL,HIGH,MEDIUM

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        if: success() || failure()
        with:
          sarif_file: trivy-*.sarif
          category: trivy-results

      - name: Run Docker Scout
        uses: docker/scout-action@v1
        with:
          command: quickview,cves,recommendations
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          only-severities: critical,high
          exit-code: true
          summary: true
          format: sarif
          sarif-file: docker-scout-results.sarif

      - name: Upload Docker Scout results
        uses: github/codeql-action/upload-sarif@v3
        if: success() || failure()
        with:
          sarif_file: docker-scout-results.sarif
          category: docker-scout

  sign-image:
    needs: [security-scan]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Sign multi-arch image
        run: cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
