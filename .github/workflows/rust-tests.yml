name: Rust Tests

on:
  push:
    branches: [ master ]
    paths:
      - '**/*.rs'
      - 'Cargo.*'
      - '.github/workflows/rust-tests.yml'
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-D warnings"
  PLATFORMS: linux/amd64,linux/ppc64le

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Check with clippy
        run: cargo clippy --all-features -- -D warnings

      - name: Run tests
        run: cargo test --all-features --verbose

      - name: Build documentation
        run: cargo doc --no-deps --all-features

      - name: Check for binary size increases
        run: |
          cargo build --release
          ls -l target/release/acci_base

      - name: Audit Rust Dependencies
        uses: actions-rust-lang/audit@v1
        with:
          ignore: RUSTSEC-2023-0071
          # token: ${{ secrets.GITHUB_TOKEN }}

      # Optional: Add benchmark comparison if you have benchmarks
      - name: Run benchmarks
        run: |
          if [ -d "benches" ]; then
            cargo install cargo-criterion
            cargo criterion
          fi

      # Coverage reporting
      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Generate coverage report
        run: |
          cargo tarpaulin --verbose --all-features --workspace --timeout 120 --out xml

      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v3
      #   with:
      #     files: cobertura.xml
      #     fail_ci_if_error: true

  msrv:
    name: Check MSRV
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Check MSRV in Cargo.toml
        run: |
          MSRV=$(cargo metadata --format-version 1 | jq -r '.packages[] | select(.name == "acci_base") | .rust_version')
          if [ -z "$MSRV" ]; then
            echo "No MSRV specified in Cargo.toml"
            exit 1
          fi
          echo "MSRV is $MSRV"

  cross-platform:
    name: Test on ${{ matrix.platform }}
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        platform: [
          {target: x86_64-unknown-linux-gnu, arch: amd64},
          {target: powerpc64le-unknown-linux-gnu, arch: ppc64le}
        ]

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}

      - name: Install cross-compilation dependencies
        run: |
          sudo apt-get update
          sudo dpkg --add-architecture ppc64el
          # Remove existing sources
          sudo rm -f /etc/apt/sources.list.d/*
          sudo truncate -s 0 /etc/apt/sources.list
          # Add repositories for amd64
          echo "deb [arch=amd64] http://archive.ubuntu.com/ubuntu jammy main restricted universe multiverse" | sudo tee /etc/apt/sources.list
          echo "deb [arch=amd64] http://archive.ubuntu.com/ubuntu jammy-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=amd64] http://archive.ubuntu.com/ubuntu jammy-security main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=amd64] http://archive.ubuntu.com/ubuntu jammy-backports main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
          # Add repositories for ppc64el
          echo "deb [arch=ppc64el] http://ports.ubuntu.com/ubuntu-ports jammy main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=ppc64el] http://ports.ubuntu.com/ubuntu-ports jammy-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=ppc64el] http://ports.ubuntu.com/ubuntu-ports jammy-security main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=ppc64el] http://ports.ubuntu.com/ubuntu-ports jammy-backports main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
          sudo apt-get update
          sudo apt-get install -y gcc-powerpc64le-linux-gnu cmake clang llvm-dev libclang-dev libc6-dev-ppc64el-cross
          sudo apt-get install -y libssl-dev:ppc64el
          # Create symlinks for OpenSSL libraries
          if [ "${{ matrix.platform.target }}" = "powerpc64le-unknown-linux-gnu" ]; then
            # Ensure OpenSSL directories exist
            sudo mkdir -p /usr/powerpc64le-linux-gnu/lib/pkgconfig
            sudo mkdir -p /usr/powerpc64le-linux-gnu/include/openssl
            # Copy OpenSSL files from ppc64el to the cross-compilation directory
            sudo cp -r /usr/lib/powerpc64le-linux-gnu/libssl.* /usr/powerpc64le-linux-gnu/lib/
            sudo cp -r /usr/lib/powerpc64le-linux-gnu/libcrypto.* /usr/powerpc64le-linux-gnu/lib/
            sudo cp -r /usr/include/powerpc64le-linux-gnu/openssl/* /usr/powerpc64le-linux-gnu/include/openssl/
            # Set environment variables
            echo "AWS_LC_SYS_EXTERNAL_BINDGEN=1" >> $GITHUB_ENV
            echo "BINDGEN_EXTRA_CLANG_ARGS=--sysroot=/usr/powerpc64le-linux-gnu -target powerpc64le-unknown-linux-gnu" >> $GITHUB_ENV
            echo "RUST_TARGET_PATH=/usr/powerpc64le-linux-gnu" >> $GITHUB_ENV
            echo "PKG_CONFIG_PATH=/usr/powerpc64le-linux-gnu/lib/pkgconfig" >> $GITHUB_ENV
            echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
            echo "AWS_LC_SYS_NO_ASM=1" >> $GITHUB_ENV
            echo "OPENSSL_DIR=/usr/powerpc64le-linux-gnu" >> $GITHUB_ENV
            echo "OPENSSL_INCLUDE_DIR=/usr/powerpc64le-linux-gnu/include" >> $GITHUB_ENV
            echo "OPENSSL_LIB_DIR=/usr/powerpc64le-linux-gnu/lib" >> $GITHUB_ENV
            # Configure cargo for PPC64LE cross-compilation
            mkdir -p .cargo
            echo '[target.powerpc64le-unknown-linux-gnu]' > .cargo/config.toml
            echo 'linker = "powerpc64le-linux-gnu-gcc"' >> .cargo/config.toml
            echo 'rustflags = ["-C", "target-feature=+elfv2", "-C", "target-cpu=ppc64le"]' >> .cargo/config.toml
          fi

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.platform.target }}

      - name: Build for ${{ matrix.platform.target }}
        run: cargo build --target ${{ matrix.platform.target }} --verbose

      - name: Run tests for ${{ matrix.platform.target }}
        run: |
          if [ "${{ matrix.platform.target }}" = "x86_64-unknown-linux-gnu" ]; then
            cargo test --target ${{ matrix.platform.target }} --verbose
          else
            echo "Skipping tests for ${{ matrix.platform.target }} as they require emulation"
          fi

      - name: Check binary size
        run: |
          ls -l target/${{ matrix.platform.target }}/debug/acci_base
