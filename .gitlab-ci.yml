# GitLab CI/CD Pipeline Configuration

variables:
  DOCKER_BUILDKIT: "1"
  CARGO_TERM_COLOR: "always"
  RUSTFLAGS: "-D warnings"
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_HOST: tcp://docker:2376
  DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  DOCKER_TLS_VERIFY: 1
  PLATFORMS: "linux/amd64,linux/ppc64le"

stages:
  - test
  - security
  - build
  - sign

# Rust Testing Stage
rust-test:
  stage: test
  image: rust:1.75-slim
  before_script:
    - rustup component add rustfmt clippy
    - cargo install cargo-criterion cargo-tarpaulin cargo-audit cargo-deny
  script:
    - cargo fmt --all -- --check
    - cargo clippy --all-features -- -D warnings
    - cargo test --all-features --verbose
    - cargo doc --no-deps --all-features
    - cargo build --release
    - cargo audit --ignore RUSTSEC-2023-0071
    - cargo deny check licenses
    - cargo deny check sources
    - cargo deny check advisories
    - if [ -d "benches" ]; then cargo criterion; fi
    - cargo tarpaulin --verbose --all-features --workspace --timeout 120 --out xml
  coverage: '/^\d+.\d+% coverage/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: cobertura.xml
  cache:
    paths:
      - target/
      - ~/.cargo/

# Docker Security Stage
docker-security:
  stage: security
  image: docker:latest
  services:
    - name: docker:dind
      command: ["--experimental"]
  before_script:
    - apk add --no-cache curl jq npm
    - npm install -g @cyclonedx/cdxgen
    - curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
    - curl -sfL https://raw.githubusercontent.com/sigstore/cosign/main/release/cosign-linux-amd64 -o /usr/local/bin/cosign
    - chmod +x /usr/local/bin/cosign
    # Setup buildx
    - docker buildx create --name multiarch-builder --use
    - docker buildx inspect --bootstrap
  script:
    # Build Multi-Arch Image
    - docker buildx build --platform $PLATFORMS
      --build-arg BUILDPLATFORM=$PLATFORMS
      -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
      -f docker/Dockerfile.prod
      --push .
    
    # Generate and Verify SBOM
    - docker create --name temp $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker cp temp:/app/bom.json ./container-bom.json
    - docker rm temp
    - cdxgen --validate ./container-bom.json
    
    # Trivy Scans
    - trivy image --format json --output trivy-results.json $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - trivy config --format json --output trivy-config-results.json $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    
    # Container Structure Tests
    - |
      if [ ! -f ./docker/.container-structure-test.yaml ]; then
        cp ./docker/.container-structure-test.yaml.dist ./docker/.container-structure-test.yaml
      fi
      container-structure-test test \
        --image $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA \
        --config ./docker/.container-structure-test.yaml
  artifacts:
    reports:
      container_scanning: trivy-results.json
    paths:
      - container-bom.json
      - trivy-*.json

# Image Signing Stage
sign-image:
  stage: sign
  image: docker:latest
  services:
    - docker:dind
  script:
    - cosign sign --yes $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  dependencies:
    - docker-security
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Include Templates
include:
  - template: Security/Container-Scanning.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml 