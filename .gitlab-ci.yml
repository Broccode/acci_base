# GitLab CI/CD Pipeline Configuration

variables:
  DOCKER_BUILDKIT: "1"
  CARGO_TERM_COLOR: "always"
  RUSTFLAGS: "-D warnings"
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_HOST: tcp://docker:2376
  DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  DOCKER_TLS_VERIFY: 1
  PLATFORMS: "linux/amd64,linux/ppc64le"

stages:
  - test
  - security
  - build
  - sign

# Rust Testing Stage
rust-test:
  stage: test
  image: rust:latest
  services:
    - docker:dind
  before_script:
    - rustup component add rustfmt clippy
    - cargo install cargo-criterion cargo-tarpaulin cargo-audit cargo-deny
  script:
    - cargo fmt --all -- --check
    - cargo clippy --all-features -- -D warnings
    - cargo test --all-features --verbose
    - cargo doc --no-deps --all-features
    - cargo build --release
    - ls -l target/release/acci_base
    - cargo audit --ignore RUSTSEC-2023-0071
    - cargo deny check licenses
    - cargo deny check sources
    - cargo deny check advisories
    - if [ -d "benches" ]; then cargo criterion; fi
    - cargo tarpaulin --verbose --all-features --workspace --timeout 120 --out xml
  coverage: '/^\d+.\d+% coverage/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: cobertura.xml
  cache:
    paths:
      - target/
      - ~/.cargo/

# Cross-Platform Testing
cross-platform-test:
  stage: test
  image: rust:latest
  services:
    - docker:dind
  parallel:
    matrix:
      - TARGET: ["x86_64-unknown-linux-gnu", "powerpc64le-unknown-linux-gnu"]
  before_script:
    - apt-get update
    - dpkg --add-architecture ppc64el
    # Remove existing sources
    - rm -f /etc/apt/sources.list.d/*
    - truncate -s 0 /etc/apt/sources.list
    # Add repositories for amd64
    - echo "deb http://archive.ubuntu.com/ubuntu jammy main restricted universe multiverse" | tee /etc/apt/sources.list
    - echo "deb http://archive.ubuntu.com/ubuntu jammy-updates main restricted universe multiverse" | tee -a /etc/apt/sources.list
    - echo "deb http://archive.ubuntu.com/ubuntu jammy-security main restricted universe multiverse" | tee -a /etc/apt/sources.list
    - echo "deb http://archive.ubuntu.com/ubuntu jammy-backports main restricted universe multiverse" | tee -a /etc/apt/sources.list
    # Add repositories for ppc64el
    - echo "deb [arch=ppc64el] http://ports.ubuntu.com/ubuntu-ports jammy main restricted universe multiverse" | tee -a /etc/apt/sources.list
    - echo "deb [arch=ppc64el] http://ports.ubuntu.com/ubuntu-ports jammy-updates main restricted universe multiverse" | tee -a /etc/apt/sources.list
    - echo "deb [arch=ppc64el] http://ports.ubuntu.com/ubuntu-ports jammy-security main restricted universe multiverse" | tee -a /etc/apt/sources.list
    - echo "deb [arch=ppc64el] http://ports.ubuntu.com/ubuntu-ports jammy-backports main restricted universe multiverse" | tee -a /etc/apt/sources.list
    - apt-get update
    - apt-get install -y gcc-powerpc64le-linux-gnu cmake clang llvm-dev libclang-dev libc6-dev-ppc64el-cross
    - apt-get install -y libssl-dev:ppc64el
    - rustup target add $TARGET
    - cargo install --force --locked bindgen-cli
    # Set environment variables for aws-lc-sys
    - |
      if [ "$TARGET" = "powerpc64le-unknown-linux-gnu" ]; then
        export AWS_LC_SYS_EXTERNAL_BINDGEN=1
        export BINDGEN_EXTRA_CLANG_ARGS="--sysroot=/usr/powerpc64le-linux-gnu -target powerpc64le-unknown-linux-gnu"
        export RUST_TARGET_PATH=/usr/powerpc64le-linux-gnu
        export PKG_CONFIG_PATH=/usr/powerpc64le-linux-gnu/lib/pkgconfig
        export PKG_CONFIG_ALLOW_CROSS=1
        export AWS_LC_SYS_NO_ASM=1
        export OPENSSL_DIR=/usr/powerpc64le-linux-gnu
        export OPENSSL_INCLUDE_DIR=/usr/powerpc64le-linux-gnu/include
        export OPENSSL_LIB_DIR=/usr/powerpc64le-linux-gnu/lib
        # Configure cargo for PPC64LE cross-compilation
        mkdir -p .cargo
        echo '[target.powerpc64le-unknown-linux-gnu]' > .cargo/config.toml
        echo 'linker = "powerpc64le-linux-gnu-gcc"' >> .cargo/config.toml
        echo 'rustflags = ["-C", "target-feature=+elfv2", "-C", "target-cpu=ppc64le"]' >> .cargo/config.toml
      fi
  script:
    - cargo build --target $TARGET --verbose
    - |
      if [ "$TARGET" = "x86_64-unknown-linux-gnu" ]; then
        cargo test --target $TARGET --verbose
      else
        echo "Skipping tests for $TARGET as they require emulation"
      fi
    - ls -l target/$TARGET/debug/acci_base
  cache:
    paths:
      - target/
      - ~/.cargo/

# Docker Security Stage
docker-security:
  stage: security
  image: docker:latest
  services:
    - name: docker:dind
      command: ["--experimental"]
  before_script:
    - apk add --no-cache curl jq npm qemu-system-x86_64 qemu-system-ppc
    - npm install -g @cyclonedx/cdxgen
    - curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
    - curl -sfL https://raw.githubusercontent.com/sigstore/cosign/main/release/cosign-linux-amd64 -o /usr/local/bin/cosign
    - chmod +x /usr/local/bin/cosign
    # Setup buildx
    - docker buildx create --name multiarch-builder --use
    - docker buildx inspect --bootstrap
  script:
    # Build Multi-Arch Images
    - |
      for platform in $(echo $PLATFORMS | tr ',' ' '); do
        docker buildx build --platform $platform \
          --build-arg BUILDPLATFORM=$platform \
          --build-arg TARGETPLATFORM=$platform \
          -t acci:$platform \
          -f docker/Dockerfile.prod .
      done
    
    # Generate and Verify SBOM for each architecture
    - |
      for platform in $(echo $PLATFORMS | tr ',' ' '); do
        docker create --platform $platform --name temp-$platform acci:$platform
        docker cp temp-$platform:/app/bom.json ./container-bom-$platform.json
        docker rm temp-$platform
        cdxgen --validate ./container-bom-$platform.json
        if ! jq -e '.components | length > 0' container-bom-$platform.json; then
          echo "SBOM appears to be empty or invalid for $platform"
          exit 1
        fi
      done
    
    # Trivy Scans for each architecture
    - |
      for platform in $(echo $PLATFORMS | tr ',' ' '); do
        trivy image --platform $platform \
          --format json \
          --output trivy-results-$platform.json \
          acci:$platform
        
        trivy config --platform $platform \
          --format json \
          --output trivy-config-results-$platform.json \
          acci:$platform
      done
    
    # Container Structure Tests for each architecture
    - |
      if [ ! -f ./docker/.container-structure-test.yaml ]; then
        cp ./docker/.container-structure-test.yaml.dist ./docker/.container-structure-test.yaml
      fi
      for platform in $(echo $PLATFORMS | tr ',' ' '); do
        container-structure-test test \
          --image acci:$platform \
          --config ./docker/.container-structure-test.yaml
      done
  artifacts:
    reports:
      container_scanning: trivy-results-*.json
    paths:
      - container-bom-*.json
      - trivy-*.json

# Image Signing Stage
sign-image:
  stage: sign
  image: docker:latest
  services:
    - docker:dind
  script:
    - |
      for platform in $(echo $PLATFORMS | tr ',' ' '); do
        cosign sign --yes acci:$platform
      done
  dependencies:
    - docker-security
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Include Templates
include:
  - template: Security/Container-Scanning.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml 