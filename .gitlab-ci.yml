# GitLab CI/CD Pipeline Configuration

variables:
  DOCKER_BUILDKIT: "1"
  CARGO_TERM_COLOR: "always"
  RUSTFLAGS: "-D warnings"
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_HOST: tcp://docker:2376
  DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  DOCKER_TLS_VERIFY: 1

stages:
  - test
  - security
  - build
  - sign

# Rust Testing Stage
rust-test:
  stage: test
  image: rust:latest
  services:
    - docker:dind
  before_script:
    - rustup component add rustfmt clippy
    - cargo install cargo-criterion cargo-tarpaulin cargo-audit cargo-deny
  script:
    - cargo fmt --all -- --check
    - cargo clippy --all-targets --all-features -- -D warnings
    - cargo test --all-features --verbose
    - cargo test --doc
    - cargo doc --no-deps --all-features
    - cargo build --release
    - ls -l target/release/acci_base
    - cargo audit
    - cargo deny check licenses
    - cargo deny check sources
    - cargo deny check advisories
    - if [ -d "benches" ]; then cargo criterion; fi
    - cargo tarpaulin --verbose --all-features --workspace --timeout 120 --out xml
  coverage: '/^\d+.\d+% coverage/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: cobertura.xml
  cache:
    paths:
      - target/
      - ~/.cargo/

# MSRV Check
msrv-check:
  stage: test
  image: rust:latest
  script:
    - MSRV=$(cargo metadata --format-version 1 | jq -r '.packages[] | select(.name == "acci_base") | .rust_version')
    - if [ -z "$MSRV" ]; then echo "No MSRV specified in Cargo.toml"; exit 1; fi
    - echo "MSRV is $MSRV"

# Cross-Platform Testing
.cross-platform-test:
  stage: test
  parallel:
    matrix:
      - RUNNER_OS: [ubuntu-latest, windows-latest]
  script:
    - cargo test --all-features --verbose

# Docker Security Stage
docker-security:
  stage: security
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - apk add --no-cache curl jq npm
    - npm install -g @cyclonedx/cdxgen
    - curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
    - curl -sfL https://raw.githubusercontent.com/sigstore/cosign/main/release/cosign-linux-amd64 -o /usr/local/bin/cosign
    - chmod +x /usr/local/bin/cosign
  script:
    # Build Image
    - docker build -t acci:latest -f docker/Dockerfile .
    
    # Generate and Verify SBOM
    - docker create --name temp acci:latest
    - docker cp temp:/app/bom.json ./container-bom.json
    - docker rm temp
    - cdxgen --validate ./container-bom.json
    - if ! jq -e '.components | length > 0' container-bom.json; then echo "SBOM appears to be empty or invalid"; exit 1; fi
    
    # Trivy Scans
    - trivy image --format json --output trivy-results.json acci:latest
    - trivy config --format json --output trivy-config-results.json acci:latest
    - trivy fs --format json --output trivy-fs-results.json .
    
    # Container Structure Tests
    - if [ ! -f ./docker/.container-structure-test.yaml ]; then cp ./docker/.container-structure-test.yaml.dist ./docker/.container-structure-test.yaml; fi
    - container-structure-test test --image acci:latest --config ./docker/.container-structure-test.yaml
  artifacts:
    reports:
      container_scanning: trivy-results.json
    paths:
      - container-bom.json
      - trivy-*.json

# Image Signing Stage
sign-image:
  stage: sign
  image: docker:latest
  services:
    - docker:dind
  script:
    - cosign sign --yes acci:latest
  dependencies:
    - docker-security
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Include Templates
include:
  - template: Security/Container-Scanning.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml 