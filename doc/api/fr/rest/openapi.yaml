openapi: "3.1.3"
info:
  title: ACCI Framework REST API
  version: 1.0.0
  description: |
    Documentation de l'API REST pour ACCI Framework.
    
    Cette API fournit des points d'accès pour la gestion des applications multi-locataires,
    la gestion des utilisateurs, l'authentification et diverses fonctionnalités d'entreprise.
  contact:
    name: ACCI Framework Team
    url: https://github.com/your-org/acci-framework
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: https://api.acci-framework.dev/v1
    description: Serveur de développement
  - url: https://api.acci-framework.com/v1
    description: Serveur de production

security:
  - bearerAuth: []
  - tenantAuth: []

tags:
  - name: Authentication
    description: Points d'accès d'authentification et d'autorisation
  - name: Users
    description: Opérations de gestion des utilisateurs
  - name: Tenants
    description: Gestion multi-locataires
  - name: Health
    description: Vérifications de santé et de disponibilité
  - name: Metrics
    description: Métriques et surveillance du système

paths:
  /health:
    get:
      tags:
        - Health
      summary: Point d'accès de vérification de santé
      description: Renvoie l'état de santé de l'API
      security: []
      responses:
        '200':
          description: Le système est en bonne santé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: Le système n'est pas en bonne santé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Connexion utilisateur
      description: Authentifie un utilisateur et renvoie des jetons d'accès
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Authentification réussie
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Échec de l'authentification
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users:
    get:
      tags:
        - Users
      summary: Liste des utilisateurs
      description: Obtient une liste paginée des utilisateurs
      parameters:
        - name: page
          in: query
          description: Numéro de page
          schema:
            type: integer
            default: 1
        - name: per_page
          in: query
          description: Éléments par page
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Liste des utilisateurs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'

    post:
      tags:
        - Users
      summary: Créer un utilisateur
      description: Crée un nouvel utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: Utilisateur créé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{id}:
    get:
      tags:
        - Users
      summary: Obtenir un utilisateur
      description: Obtient les détails d'un utilisateur spécifique
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Détails de l'utilisateur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    put:
      tags:
        - Users
      summary: Mettre à jour un utilisateur
      description: Met à jour les détails d'un utilisateur spécifique
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: Utilisateur mis à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    tenantAuth:
      type: apiKey
      in: header
      name: X-Tenant-ID

  schemas:
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
          description: État de santé du système
        version:
          type: string
          description: Version de l'API
        timestamp:
          type: string
          format: date-time
          description: Horodatage de la vérification
        checks:
          type: array
          description: Liste des vérifications des composants
          items:
            $ref: '#/components/schemas/HealthCheck'

    HealthCheck:
      type: object
      properties:
        component:
          type: string
          description: Nom du composant vérifié
        status:
          type: string
          enum: [healthy, unhealthy]
          description: État du composant
        details:
          type: object
          description: Informations d'état supplémentaires
          additionalProperties: true

    LoginRequest:
      type: object
      required:
        - email
        - password
        - tenant_id
      properties:
        email:
          type: string
          format: email
          description: Adresse e-mail de l'utilisateur
        password:
          type: string
          format: password
          description: Mot de passe de l'utilisateur
        tenant_id:
          type: string
          format: uuid
          description: ID du locataire

    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
          description: Jeton d'accès JWT
        refresh_token:
          type: string
          description: Jeton de rafraîchissement JWT
        token_type:
          type: string
          enum: [bearer]
          description: Type de jeton (toujours 'bearer')
        expires_in:
          type: integer
          description: Délai d'expiration en secondes
        scope:
          type: string
          description: Portée des autorisations

    ErrorResponse:
      type: object
      properties:
        code:
          type: string
          description: Code d'erreur
        message:
          type: string
          description: Message d'erreur
        details:
          type: object
          description: Détails d'erreur supplémentaires
          additionalProperties: true
        request_id:
          type: string
          description: ID de requête unique 