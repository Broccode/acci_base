FROM --platform=$BUILDPLATFORM lukemathwalker/cargo-chef:latest-rust-1.82 AS chef
WORKDIR /app

FROM chef AS planner
COPY . .
RUN cargo chef prepare --recipe-path recipe.json

FROM chef AS builder
ARG TARGETPLATFORM
ARG BUILDPLATFORM
RUN echo "Building on $BUILDPLATFORM, targeting $TARGETPLATFORM"

# Install nightly toolchain and components
RUN rustup toolchain install nightly && \
    rustup component add rust-src --toolchain nightly

# Set up cross-compilation
RUN case "$TARGETPLATFORM" in \
    "linux/amd64") \
        echo "Setting up amd64 build" && \
        rustup target add x86_64-unknown-linux-gnu && \
        rustup target add x86_64-unknown-linux-gnu --toolchain nightly ;; \
    "linux/ppc64le") \
        echo "Setting up ppc64le build" && \
        rustup target add powerpc64le-unknown-linux-gnu && \
        rustup target add powerpc64le-unknown-linux-gnu --toolchain nightly ;; \
    *) echo "Unsupported platform: $TARGETPLATFORM" && exit 1 ;; \
    esac

COPY --from=planner /app/recipe.json recipe.json

# Install system dependencies
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y \
    pkg-config \
    libssl-dev \
    cmake \
    gcc-powerpc64le-linux-gnu \
    clang \
    llvm \
    libclang-dev \
    && rm -rf /var/lib/apt/lists/*

# Install bindgen CLI
RUN cargo install --locked bindgen-cli

# Create appuser
RUN adduser --no-create-home --disabled-password --gecos "" appuser

# Copy configuration files
COPY .clippy.toml .
COPY rustfmt.toml .

# Build dependencies - this is the caching Docker layer!
RUN cargo chef cook --recipe-path recipe.json

# Build application with platform-specific target and bindgen feature
COPY . .

# Enable bindgen for aws-lc-sys
ENV AWS_LC_BINDGEN=1

RUN case "$TARGETPLATFORM" in \
    "linux/amd64") \
        echo "Building for amd64" && \
        BINDGEN_EXTRA_CLANG_ARGS="-target x86_64-unknown-linux-gnu" \
        RUSTFLAGS="-C target-feature=+crt-static" \
        cargo +nightly build --release --target x86_64-unknown-linux-gnu -Z build-std=std,panic_abort ;; \
    "linux/ppc64le") \
        echo "Building for ppc64le" && \
        BINDGEN_EXTRA_CLANG_ARGS="-target powerpc64le-unknown-linux-gnu" \
        RUSTFLAGS="-C target-feature=+crt-static" \
        cargo +nightly build --release --target powerpc64le-unknown-linux-gnu -Z build-std=std,panic_abort ;; \
    esac

# Generate SBOM with platform info
RUN cargo install cargo-cyclonedx && \
    case "$TARGETPLATFORM" in \
    "linux/amd64") ARCH="amd64" ;; \
    "linux/ppc64le") ARCH="ppc64le" ;; \
    esac && \
    cargo cyclonedx -f json --output bom-$ARCH.json && \
    mv bom-$ARCH.json bom.json

# Security scan stage
FROM aquasec/trivy:latest AS security-scan
COPY --from=builder /app /app
RUN trivy fs --severity HIGH,CRITICAL --exit-code 1 /app

# Final stage
FROM gcr.io/distroless/cc-debian12:nonroot

# Copy binary, SBOM and user info based on platform
ARG TARGETPLATFORM
COPY --from=builder /etc/passwd /etc/passwd
COPY --from=builder /app/bom.json /app/bom.json
COPY --from=builder /app/target/*/release/acci_base /app/acci_base

# Use non-root user
USER appuser

# Set secure defaults
ENV RUST_BACKTRACE=0
ENV RUST_LOG=info

ARG SERVER_BACKEND_PORT=3333
EXPOSE ${SERVER_BACKEND_PORT}

HEALTHCHECK --interval=30s --timeout=3s \
    CMD curl -f http://localhost:${SERVER_BACKEND_PORT}/health || exit 1

ENTRYPOINT ["/app/acci_base"]
