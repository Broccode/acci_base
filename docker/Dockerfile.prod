FROM --platform=$BUILDPLATFORM lukemathwalker/cargo-chef:latest-rust-1.82 AS chef
WORKDIR /app

FROM chef AS planner
COPY . .
RUN cargo chef prepare --recipe-path recipe.json

FROM chef AS builder
ARG TARGETPLATFORM
ARG BUILDPLATFORM
RUN echo "Building on $BUILDPLATFORM, targeting $TARGETPLATFORM"

# Install nightly toolchain and components with retry logic
RUN for i in {1..3}; do \
        rustup toolchain install nightly && \
        rustup component add rust-src --toolchain nightly && \
        break || { \
            if [ $i -lt 3 ]; then \
                echo "Attempt $i failed! Trying again in 10 seconds..." && \
                sleep 10; \
            else \
                echo "Failed after 3 attempts!" && \
                exit 1; \
            fi \
        } \
    done

# Set up cross-compilation with retry logic
RUN for i in {1..3}; do \
        case "$TARGETPLATFORM" in \
        "linux/amd64") \
            echo "Setting up amd64 build" && \
            rustup target add x86_64-unknown-linux-gnu && \
            rustup target add x86_64-unknown-linux-gnu --toolchain nightly ;; \
        "linux/ppc64le") \
            echo "Setting up ppc64le build" && \
            rustup target add powerpc64le-unknown-linux-gnu && \
            rustup target add powerpc64le-unknown-linux-gnu --toolchain nightly ;; \
        *) echo "Unsupported platform: $TARGETPLATFORM" && exit 1 ;; \
        esac && break || { \
            if [ $i -lt 3 ]; then \
                echo "Attempt $i failed! Trying again in 10 seconds..." && \
                sleep 10; \
            else \
                echo "Failed after 3 attempts!" && \
                exit 1; \
            fi \
        } \
    done

COPY --from=planner /app/recipe.json recipe.json

# Install system dependencies and cross-compilation tools
RUN dpkg --add-architecture ppc64el && \
    apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y \
    pkg-config \
    libssl-dev \
    libssl-dev:ppc64el \
    cmake \
    gcc-powerpc64le-linux-gnu \
    clang \
    llvm \
    libclang-dev \
    crossbuild-essential-ppc64el \
    git \
    ninja-build \
    golang \
    && rm -rf /var/lib/apt/lists/*

# Build and install AWS-LC for ppc64le
RUN case "$TARGETPLATFORM" in \
    "linux/ppc64le") \
        git clone --depth 1 --branch v1.12.0 https://github.com/aws/aws-lc.git && \
        cd aws-lc && \
        mkdir build && \
        cd build && \
        CC=powerpc64le-linux-gnu-gcc \
        CXX=powerpc64le-linux-gnu-g++ \
        cmake -GNinja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_SYSTEM_NAME=Linux \
            -DCMAKE_SYSTEM_PROCESSOR=ppc64le \
            -DCMAKE_C_COMPILER=powerpc64le-linux-gnu-gcc \
            -DCMAKE_CXX_COMPILER=powerpc64le-linux-gnu-g++ \
            -DCMAKE_INSTALL_PREFIX=/usr/powerpc64le-linux-gnu \
            .. && \
        ninja && \
        ninja install ;; \
    *) echo "Skipping AWS-LC build for $TARGETPLATFORM" ;; \
    esac

# Set up OpenSSL for cross-compilation
RUN case "$TARGETPLATFORM" in \
    "linux/ppc64le") \
        mkdir -p /usr/powerpc64le-linux-gnu/lib /usr/powerpc64le-linux-gnu/include && \
        rm -f /usr/powerpc64le-linux-gnu/lib/libssl.so && \
        rm -f /usr/powerpc64le-linux-gnu/lib/libcrypto.so && \
        rm -rf /usr/powerpc64le-linux-gnu/include/openssl && \
        ln -s /usr/lib/powerpc64le-linux-gnu/libssl.so.3 /usr/powerpc64le-linux-gnu/lib/libssl.so && \
        ln -s /usr/lib/powerpc64le-linux-gnu/libcrypto.so.3 /usr/powerpc64le-linux-gnu/lib/libcrypto.so && \
        cp -r /usr/include/powerpc64le-linux-gnu/openssl /usr/powerpc64le-linux-gnu/include/ ;; \
    *) echo "Skipping OpenSSL setup for $TARGETPLATFORM" ;; \
    esac

# Install bindgen CLI
RUN cargo install --locked bindgen-cli

# Create appuser
RUN adduser --no-create-home --disabled-password --gecos "" appuser

# Copy configuration files
COPY .clippy.toml .
COPY rustfmt.toml .

# Build dependencies - this is the caching Docker layer!
RUN cargo chef cook --recipe-path recipe.json

# Build application with platform-specific target and bindgen feature
COPY . .

# Enable bindgen for aws-lc-sys
ENV AWS_LC_BINDGEN=1

# Build with platform-specific configuration
RUN case "$TARGETPLATFORM" in \
    "linux/amd64") \
        echo "Building for amd64" && \
        BINDGEN_EXTRA_CLANG_ARGS="-target x86_64-unknown-linux-gnu" \
        RUSTFLAGS="-C target-feature=+crt-static" \
        PKG_CONFIG_ALLOW_CROSS=1 \
        cargo +nightly build --release --target x86_64-unknown-linux-gnu -Z build-std=std,panic_abort ;; \
    "linux/ppc64le") \
        echo "Building for ppc64le" && \
        BINDGEN_EXTRA_CLANG_ARGS="-target powerpc64le-unknown-linux-gnu" \
        RUSTFLAGS="-C target-feature=+crt-static -C linker=powerpc64le-linux-gnu-gcc" \
        PKG_CONFIG_ALLOW_CROSS=1 \
        OPENSSL_DIR=/usr/powerpc64le-linux-gnu \
        OPENSSL_INCLUDE_DIR=/usr/include/powerpc64le-linux-gnu \
        OPENSSL_LIB_DIR=/usr/lib/powerpc64le-linux-gnu \
        PKG_CONFIG_PATH=/usr/lib/powerpc64le-linux-gnu/pkgconfig \
        PKG_CONFIG_SYSROOT_DIR=/ \
        CC_powerpc64le_unknown_linux_gnu=powerpc64le-linux-gnu-gcc \
        CXX_powerpc64le_unknown_linux_gnu=powerpc64le-linux-gnu-g++ \
        AR_powerpc64le_unknown_linux_gnu=powerpc64le-linux-gnu-ar \
        cargo +nightly build --release --target powerpc64le-unknown-linux-gnu -Z build-std=std,panic_abort ;; \
    esac

# Generate SBOM with platform info
RUN cargo install cargo-cyclonedx && \
    case "$TARGETPLATFORM" in \
    "linux/amd64") ARCH="amd64" ;; \
    "linux/ppc64le") ARCH="ppc64le" ;; \
    esac && \
    cargo cyclonedx -f json --output bom-$ARCH.json && \
    mv bom-$ARCH.json bom.json

# Security scan stage
FROM aquasec/trivy:latest AS security-scan
COPY --from=builder /app /app
RUN trivy fs --severity HIGH,CRITICAL --exit-code 1 /app

# Final stage
FROM gcr.io/distroless/cc-debian12:nonroot

# Copy binary, SBOM and user info based on platform
ARG TARGETPLATFORM
COPY --from=builder /etc/passwd /etc/passwd
COPY --from=builder /app/bom.json /app/bom.json
COPY --from=builder /app/target/*/release/acci_base /app/acci_base

# Use non-root user
USER appuser

# Set secure defaults
ENV RUST_BACKTRACE=0
ENV RUST_LOG=info

ARG SERVER_BACKEND_PORT=3333
EXPOSE ${SERVER_BACKEND_PORT}

HEALTHCHECK --interval=30s --timeout=3s \
    CMD curl -f http://localhost:${SERVER_BACKEND_PORT}/health || exit 1

ENTRYPOINT ["/app/acci_base"]
