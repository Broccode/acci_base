services:
  app:
    build:
      context: ..
      dockerfile: docker/Dockerfile.dev
    volumes:
      - ..:/app
      # - ../src:/app/src
      # - ../tests:/app/tests
      # - ../Cargo.toml:/app/Cargo.toml
      # - ../Cargo.lock:/app/Cargo.lock
      # - ../config:/app/config
      # - ../scripts:/app/scripts
      # - ../locales:/app/locales
    ports:
      - "${SERVER_BACKEND_PORT:-3333}:${SERVER_BACKEND_PORT:-3333}"
    environment:
      - RUST_BACKTRACE=1
      - RUST_LOG=${LOGGING_LEVEL:-debug}
      - CONFIG_FILE=/app/config.toml
      - KEYCLOAK_URL=http://keycloak:8080
      - KEYCLOAK_REALM=${KEYCLOAK_REALM:-acci}
      - KEYCLOAK_CLIENT_ID=${KEYCLOAK_CLIENT_ID:-acci-backend}
      - KEYCLOAK_CLIENT_SECRET=${KEYCLOAK_CLIENT_SECRET:-acci_secret}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      keycloak:
        condition: service_healthy

  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    command: start-dev
    environment:
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN:-admin}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD:-admin}
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://db:5432/${KEYCLOAK_DB_NAME:-keycloak}
      - KC_DB_USERNAME=${DATABASE_USER:-acci}
      - KC_DB_PASSWORD=${DATABASE_PASSWORD:-acci_dev_password}
      - KC_HOSTNAME_STRICT=false
      - KC_HTTP_RELATIVE_PATH=/auth
    ports:
      - "${KEYCLOAK_PORT:-8080}:8080"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/auth/health/ready"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  db:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=${DATABASE_NAME:-acci_dev}
      - POSTGRES_USER=${DATABASE_USER:-acci}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD:-acci_dev_password}
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U ${DATABASE_USER:-acci}
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis:7-alpine
    command: redis-server ${REDIS_PASSWORD:+--requirepass ${REDIS_PASSWORD}} --bind 0.0.0.0
    environment:
      - REDIS_URL=${REDIS_URL:-redis://localhost:6379}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data:
