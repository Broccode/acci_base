services:
  app:
    image: ${DOCKER_REGISTRY:-ghcr.io}/your-org/acci:${TAG:-latest}
    restart: unless-stopped
    environment:
      - RUST_LOG=${LOGGING_LEVEL:-info}
      - CONFIG_FILE=/app/config/config.prod.toml
      - KEYCLOAK_URL=http://keycloak:8080
      - KEYCLOAK_REALM=${KEYCLOAK_REALM}
      - KEYCLOAK_CLIENT_ID=${KEYCLOAK_CLIENT_ID}
      - KEYCLOAK_CLIENT_SECRET=${KEYCLOAK_CLIENT_SECRET}
      - EVENTSTORE_CONNECTION_STRING=esdb://eventstore:2113?tls=true&tlsVerifyCert=true
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672
    ports:
      - "${SERVER_BACKEND_PORT:-3333}:3333"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      eventstore:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    deploy:
      replicas: ${APP_REPLICAS:-2}
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=Host(`api.acci.io`)"
      - "traefik.http.services.app.loadbalancer.healthcheck.path=/ready"
      - "traefik.http.services.app.loadbalancer.healthcheck.interval=30s"
      - "traefik.http.services.app.loadbalancer.healthcheck.timeout=5s"
      - "traefik.http.services.app.loadbalancer.sticky.cookie=true"
      - "traefik.http.middlewares.app-retry.retry.attempts=3"
      - "traefik.http.middlewares.app-retry.retry.initialInterval=100ms"
    networks:
      - acci-network

  keycloak:
    image: quay.io/keycloak/keycloak:26.0.8
    command: start
    environment:
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://db:5432/${DATABASE_NAME}
      - KC_DB_USERNAME=${DATABASE_USER}
      - KC_DB_PASSWORD=${DATABASE_PASSWORD}
      - KC_HOSTNAME_STRICT=true
      - KC_HOSTNAME=${KEYCLOAK_HOSTNAME}
      - KC_HTTP_ENABLED=true
      - KC_HTTPS_ENABLED=true
      - KC_HTTPS_CERTIFICATE_FILE=/opt/keycloak/conf/tls/tls.crt
      - KC_HTTPS_CERTIFICATE_KEY_FILE=/opt/keycloak/conf/tls/tls.key
      - KC_HTTP_RELATIVE_PATH=/auth
      - KC_HEALTH_ENABLED=true
    volumes:
      - ${TLS_CERT_PATH}:/opt/keycloak/conf/tls/tls.crt:ro
      - ${TLS_KEY_PATH}:/opt/keycloak/conf/tls/tls.key:ro
    ports:
      - "${KEYCLOAK_PORT:-8080}:8080"
      - "${KEYCLOAK_HTTPS_PORT:-8443}:8443"
    deploy:
      replicas: ${KEYCLOAK_REPLICAS:-2}
      update_config:
        parallelism: 1
        order: start-first
      resources:
        limits:
          cpus: '1'
          memory: 2G
    healthcheck:
      test: ["CMD", "curl", "-f", "https://localhost:8443/auth/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  db:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=${DATABASE_NAME}
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
    healthcheck:
      test: pg_isready -U ${DATABASE_USER}
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD} --bind 0.0.0.0
    volumes:
      - redis_data:/data
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: redis-cli -a ${REDIS_PASSWORD} ping
      interval: 10s
      timeout: 5s
      retries: 5

  eventstore:
    image: eventstore/eventstore:23.10.0-bookworm-slim
    environment:
      - EVENTSTORE_CLUSTER_SIZE=${EVENTSTORE_CLUSTER_SIZE:-3}
      - EVENTSTORE_RUN_PROJECTIONS=All
      - EVENTSTORE_START_STANDARD_PROJECTIONS=true
      - EVENTSTORE_EXT_TCP_PORT=1113
      - EVENTSTORE_HTTP_PORT=2113
      - EVENTSTORE_CERTIFICATE_FILE=/etc/eventstore/tls/node.crt
      - EVENTSTORE_CERTIFICATE_PRIVATE_KEY_FILE=/etc/eventstore/tls/node.key
      - EVENTSTORE_TRUSTED_ROOT_CERTIFICATES_PATH=/etc/eventstore/tls/ca
    volumes:
      - eventstore_data:/var/lib/eventstore
      - ${EVENTSTORE_CERT_PATH}:/etc/eventstore/tls/node.crt:ro
      - ${EVENTSTORE_KEY_PATH}:/etc/eventstore/tls/node.key:ro
      - ${EVENTSTORE_CA_PATH}:/etc/eventstore/tls/ca:ro
    deploy:
      replicas: ${EVENTSTORE_CLUSTER_SIZE:-3}
      update_config:
        parallelism: 1
        order: start-first
      resources:
        limits:
          cpus: '1'
          memory: 2G
    healthcheck:
      test: ["CMD-SHELL", "curl -f https://localhost:2113/health/live || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
      - RABBITMQ_DEFAULT_VHOST=/
      - RABBITMQ_SSL_CACERTFILE=/etc/rabbitmq/ssl/ca.crt
      - RABBITMQ_SSL_CERTFILE=/etc/rabbitmq/ssl/tls.crt
      - RABBITMQ_SSL_KEYFILE=/etc/rabbitmq/ssl/tls.key
      - RABBITMQ_SSL_VERIFY=verify_peer
      - RABBITMQ_SSL_FAIL_IF_NO_PEER_CERT=true
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ${RABBITMQ_CA_PATH}:/etc/rabbitmq/ssl/ca.crt:ro
      - ${RABBITMQ_CERT_PATH}:/etc/rabbitmq/ssl/tls.crt:ro
      - ${RABBITMQ_KEY_PATH}:/etc/rabbitmq/ssl/tls.key:ro
    deploy:
      replicas: ${RABBITMQ_CLUSTER_SIZE:-3}
      update_config:
        parallelism: 1
        order: start-first
      resources:
        limits:
          cpus: '1'
          memory: 2G
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 5

  prometheus:
    image: prom/prometheus:v2.50.1
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
      placement:
        constraints:
          - node.role == manager
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:10.4.0
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=https://grafana.acci.io
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=${SMTP_HOST}
      - GF_SMTP_USER=${SMTP_USER}
      - GF_SMTP_PASSWORD=${SMTP_PASSWORD}
      - GF_SMTP_FROM_ADDRESS=${SMTP_FROM}
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
      placement:
        constraints:
          - node.role == manager
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - monitoring

  node-exporter:
    image: prom/node-exporter:v1.7.0
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    deploy:
      mode: global
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
    networks:
      - monitoring

  alertmanager:
    image: prom/alertmanager:v0.27.0
    volumes:
      - ./alertmanager:/etc/alertmanager
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=https://alerts.acci.io'
    environment:
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - TEAMS_WEBHOOK_URL=${TEAMS_WEBHOOK_URL}
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
      placement:
        constraints:
          - node.role == manager
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  eventstore_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:
  alertmanager_data:

secrets:
  db_password:
    external: true
  redis_password:
    external: true
  keycloak_admin_password:
    external: true
  keycloak_client_secret:
    external: true

networks:
  default:
    driver: overlay
    driver_opts:
      encrypted: "true"
  acci-network:
    driver: overlay
    driver_opts:
      encrypted: "true"
  monitoring:
    driver: overlay
    driver_opts:
      encrypted: "true"
    internal: true 